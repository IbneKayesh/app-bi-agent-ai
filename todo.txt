# üß© PHASE 1 ‚Äî PLANNING & SETUP

1. **Project Structure**

   * `/backend-app` (Node.js + Express)
   * `/backend-app/db` (SQLite databases)
   * `/frontend-app` (React + PrimeReact)
   * `/shared` (schema.json, config files)
2. **Define Database Schema**

   * `shop.db` ‚Üí existing sales table
   * `agent_training.db` ‚Üí query logs, user feedback, corrections
   * `user_sessions.db` (optional) ‚Üí track concurrent users
3. **Create `schema.json`**

   * Define tables, columns, data types
   * Add synonyms, purposes, examples
   * Store in `/shared/schema.json`
4. **Environment Configuration**

   * `.env` file for ports, DB paths, API limits, cache TTLs
   * Config loader using `dotenv`

---

# ‚öôÔ∏è PHASE 2 ‚Äî CORE BACKEND (Node.js + Express)

### A. Server Setup

* [ ] Initialize Node project, install Express & dependencies
* [ ] Create `/api/ask` endpoint
* [ ] Create `/api/feedback` endpoint (like/dislike + corrected SQL)
* [ ] Create `/api/examples` endpoint (for admin / retraining)

### B. Domain Classifier

* [ ] NLP preprocessing (lowercase, remove stopwords)
* [ ] Keyword/synonym match from `schema.json`
* [ ] If no domain terms found ‚Üí respond ‚ÄúSorry, I don‚Äôt understand your query.‚Äù

### C. NLU Engine

* [ ] Detect entities (item, category, date range, etc.)
* [ ] Extract numbers (e.g., ‚Äúlast 20 days‚Äù)
* [ ] Parse dates using `chrono-node` or `date-fns`
* [ ] Match synonyms to canonical column names

### D. SQL Template Engine

* [ ] Create safe SQL templates:

  * Sales total (day/month/category)
  * Item-wise sales
  * Category comparisons
  * Order count comparisons
  * Date range summaries
* [ ] Template substitution logic with parameter binding
* [ ] Retrieve similar past queries for reuse (RAG-like)

### E. SQL Validation Layer

* [ ] Use `node-sql-parser` for validation
* [ ] Allow only `SELECT` queries
* [ ] Verify columns/tables exist in `schema.json`
* [ ] Auto-append `LIMIT 1000`
* [ ] Prevent SQL injection / PRAGMA abuse

### F. Database Executor

* [ ] Create worker thread pool (1‚Äì2 workers)
* [ ] Enable SQLite WAL mode
* [ ] Execute asynchronously
* [ ] Return result + summary (count, totals, etc.)

### G. Result Summarizer

* [ ] Compute totals, growth %, top categories
* [ ] Return:

  ```
  {
    SQL_Query: "...",
    Response_Summary: "...",
    Suggestion: "..."
  }
  ```

### H. Feedback Module

* [ ] Record feedback (query_id, sentiment, corrected SQL)
* [ ] Store in `agent_training.db`
* [ ] Promote corrected SQL to retraining

### I. Auto-Learning (Lightweight)

* [ ] Example retriever using Fuse.js
* [ ] Add high-rated examples
* [ ] Use examples for future SQL adaptation
* [ ] Optional admin review

### J. Security & Reliability

* [ ] Sanitize inputs
* [ ] Apply rate limiting
* [ ] Cache frequent queries (LRU cache)
* [ ] Logging with `pino` or `winston`
* [ ] Error middleware & graceful shutdown

---

# üíª PHASE 3 ‚Äî FRONTEND (React + PrimeReact)

### A. Core UI

* [ ] Chat window for queries
* [ ] Display SQL, summary, and suggestion
* [ ] PrimeReact DataTable for results
* [ ] Like/Dislike buttons

### B. Visualizations

* [ ] Integrate `Recharts` or `Chart.js`
* [ ] Show graphs for grouped results
* [ ] Toggle Table/Chart view

### C. Interaction

* [ ] Live typing ‚Üí backend query
* [ ] ‚ÄúAgent is thinking‚Ä¶‚Äù loader
* [ ] Handle error gracefully
* [ ] Store chat history locally

### D. Feedback Flow

* [ ] Like/Dislike ‚Üí `/api/feedback`
* [ ] ‚ÄúEdit SQL‚Äù ‚Üí submit corrected SQL

---

# üß† PHASE 4 ‚Äî SELF-LEARNING / MAINTENANCE

1. Retraining Scheduler ‚Äî read feedback DB ‚Üí update retriever memory
2. Admin Dashboard (optional) ‚Äî view queries & feedback
3. Performance Monitoring ‚Äî log response time & load
4. Optimization ‚Äî indexes, PRAGMA tuning, caching

---

# üì¶ PHASE 5 ‚Äî DEPLOYMENT / TESTING

* [ ] Unit tests (Jest) for NLU & SQL generation
* [ ] Integration tests (supertest) for APIs
* [ ] Load tests (artillery/k6) for concurrency
* [ ] Dockerfile (optional lightweight build)
* [ ] Local run scripts:

  * `npm run dev` (backend)
  * `npm start` (frontend)

---

# ‚úÖ PHASE 6 ‚Äî FUTURE UPGRADES (OPTIONAL)

* [ ] Add small local LLM (llama.cpp 1B‚Äì3B)
* [ ] Multi-table join support
* [ ] User authentication (JWT)
* [ ] Export reports (PDF/CSV)